import math
from typing import List


class Plant:
    """
    Represents the physical configuration and dynamics of a robot with 8 thrusters.

    This class models how thruster PWM signals map to physical forces and torques on the robot.
    It defines the 3D positions and directions of each thruster, computes their torques via
    cross products, and builds a wrench matrix that relates individual thruster outputs
    to a 6D force-torque vector.

    Attributes:
        thruster_positions (List[List[float]]): 3D coordinates for each thruster.
        thruster_directions (List[List[float]]): Unit vectors representing each thruster's force direction.
        thruster_torques (List[List[float]]): Torques generated by each thruster (position Ã— direction).
        wrench_matrix_transposed (List[List[float]]): Transposed wrench matrix (8x6).
        wrench_matrix (List[List[float]]): Standard wrench matrix (6x8) used to compute net force/torque.
    """

    def __init__(self) -> None:
        # Thruster positions: List of 3D coordinates
        self.thruster_positions: List[List[float]] = [
            [0.2535, -0.2035, 0.042],
            [0.2535, 0.2035, 0.042],
            [-0.2545, -0.2035, 0.042],
            [-0.2545, 0.2035, 0.042],
            [0.1670, -0.1375, -0.049],
            [0.1670, 0.1375, -0.049],
            [-0.1975, -0.1165, -0.049],
            [-0.1975, 0.1165, -0.049],
        ]

        # Thruster directions: List of 3D unit vectors
        sin45: float = math.sin(math.pi / 4)
        self.thruster_directions: List[List[float]] = [
            [0.0, 0.0, 1.0],
            [0.0, 0.0, -1.0],
            [0.0, 0.0, 1.0],
            [0.0, 0.0, -1.0],
            [-sin45, -sin45, 0.0],
            [sin45, -sin45, 0.0],
            [-sin45, sin45, 0.0],
            [sin45, sin45, 0.0],
        ]
        # Thruster torques: Cross product of positions and directions
        self.thruster_torques: List[List[float]] = [
            self.cross_product(self.thruster_positions[i], self.thruster_directions[i])
            for i in range(8)
        ]

        # Compute wrench matrix (6x8)
        self.wrench_matrix_transposed: List[List[float]] = [[0.0] * 6 for _ in range(8)]
        for i in range(8):
            self.wrench_matrix_transposed[i][0:3] = self.thruster_directions[i]
            self.wrench_matrix_transposed[i][3:6] = self.thruster_torques[i]

        # Transpose to get wrench matrix (6x8)
        self.wrench_matrix: List[List[float]] = self.transpose_matrix(
            self.wrench_matrix_transposed
        )

    def pwm_force_scalar(self, x: float) -> float:
        """
        Converts a single PWM signal to a scalar thrust force using a piecewise cubic fit.

        Args:
            x (float): The PWM signal value (expected between 1100 and 1900).

        Returns:
            float: The computed thrust force.

        Raises:
            ValueError: If the PWM value is outside the valid range.
        """
        x = x / 1000
        if 1100 <= x < 1460:
            force = (
                (-1.24422882971549e-8) * x**3
                + (4.02057100632393e-5) * x**2
                - 0.0348619861030835 * x
                + 3.90671429105423
            )
        elif 1460 <= x <= 1540:
            force = 0.0
        elif 1540 < x <= 1900:
            force = (
                (-1.64293565374284e-8) * x**3
                + (9.45962838560648e-5) * x**2
                - 0.170812079190679 * x
                + 98.7232373648272
            )
        else:
            raise ValueError("PWM value out of valid range (1100-1900)")
        return force

    def pwm_force(self, pwm_set: List[float]) -> None:
        """
        Converts a list of PWM signals into a combined 6D force-torque vector
        and prints the result.

        Args:
            pwm_set (List[float]): List of PWM signal values for the 8 thrusters.
        """
        thruster_forces: List[float] = [self.pwm_force_scalar(pwm) for pwm in pwm_set]
        force: List[float] = self.matrix_vector_multiply(
            self.wrench_matrix, thruster_forces
        )
        print(force)

    @staticmethod
    def transpose_matrix(matrix: List[List[float]]) -> List[List[float]]:
        """
        Transposes a 2D matrix (list of lists).

        Args:
            matrix (List[List[float]]): Matrix to transpose.

        Returns:
            List[List[float]]: Transposed matrix.
        """
        return [[row[i] for row in matrix] for i in range(len(matrix[0]))]

    @staticmethod
    def matrix_vector_multiply(
        matrix: List[List[float]], vector: List[float]
    ) -> List[float]:
        """
        Multiplies a matrix by a vector.

        Args:
            matrix (List[List[float]]): A 2D list representing the matrix.
            vector (List[float]): A list representing the vector.

        Returns:
            List[float]: Resulting vector from the multiplication.
        """
        return [
            sum(matrix[i][j] * vector[j] for j in range(len(vector)))
            for i in range(len(matrix))
        ]

    @staticmethod
    def cross_product(a: List[float], b: List[float]) -> List[float]:
        """
        Computes the cross product of two 3D vectors.

        Args:
            a (List[float]): First 3D vector.
            b (List[float]): Second 3D vector.

        Returns:
            List[float]: The 3D cross product vector.
        """
        return [
            a[1] * b[2] - a[2] * b[1],
            a[2] * b[0] - a[0] * b[2],
            a[0] * b[1] - a[1] * b[0],
        ]
